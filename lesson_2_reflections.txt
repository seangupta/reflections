What happens when you initialize a repository? Why do you need to do it?

	When you initialise a repo, a folder .git is created holding the meta data of
	the repo. The new git repo is tied to a specific directory, with zero
	commits. You need to initialise a git repo because a directory is not
	automatically a git repo.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

	Files are added to the staging area before a commit (which adds to the 
	repository). If a file is modified, at first only the file in the working
	directory changes. It needs to be added to the staging area before being
	committed to the repo. This serves the purpose that one might want to 
	further change modified files before these are finally committed. I.e. the
	staging area is an intermediate stage.

How can you use the staging area to make sure you have one commit per logical
change?

	All files that were modified for the logical change are added to the staging
	area. One can then use the command git diff to display the changes between the
	working directory and the staging area to verify that there is only one
	logical change, before committing.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches allow one to experiment and try out new changes. Also one might want
	to create different versions of an application, e.g. a working prototype to
	show to someone but without affecting the master branch.

How do the diagrams help you visualize the branch structure?

	Diagrams show the tree structure that emerges from a git project, including
	parent-child/ancestry relationships as well as reachability.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches yields a combined branch (merged into the currently
	checked out branch) with all changes present in either one of the merged
	branches (unless a line was removed from the original in one of the branches).
	We represent this in a diagram to help visualise the branch structure and show
	what the parent branches for the new merged branch are, and where all commits
	in the merged branch stem from.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Git's automatic merging allows you to work more effectively because you don't
	have to manually merge branches. However, sometimes merge conflicts can arise,
	in which case these need to resolve manually. In principle, a machine learning
	scheme could be used to let Git make an educated guess how to resolve this
	conflict however this would create the possibility of git erring when
	performing the conflict resolution.







